//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN.Services.NetworkModelService.DataModel.Ostale
{
    using System;
    using System.Collections.Generic;
    using FTN;
    using FTN.Common;
    using FTN.Services.NetworkModelService.DataModel.Core;


    /// Combination of conducting material with consistent electrical characteristics, building a single electrical system, used to carry current between points in the power system.
    public class Conductor : ConductingEquipment {
        
        public Conductor(long globalId) : base(globalId) { }

        private float length;

        public float Length
        {
            get { return length; }
            set { length = value; }
        }

        public override bool Equals(object x)
        {
            if (base.Equals(x))
            {
                Conductor obj = (Conductor)x;
                return this.length == obj.length;
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess Implementation

        public override bool HasProperty(ModelCode property)
        {
            switch (property)
            {
                case ModelCode.COND_LENGTH:
                    return true;
                default:
                    return base.HasProperty(property);
            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.COND_LENGTH:
                    property.SetValue(this.Length);
                    break;
                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.COND_LENGTH:
                    this.Length = property.AsFloat();
                    break;
                default:
                    base.SetProperty(property);
                    break;
            }
        }


        #endregion

        #region IReference Implementation

        public override bool IsReferenced
        {
            get
            {
                return base.IsReferenced;
            }

        }

        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            base.GetReferences(references, refType);
        }

        public override void AddReference(ModelCode referenceId, long globalId)
        {

            base.AddReference(referenceId, globalId);

        }

        public override void RemoveReference(ModelCode referenceId, long globalId)
        {
            base.RemoveReference(referenceId, globalId);
        }

        #endregion
    }
}
