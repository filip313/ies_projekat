//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN.Services.NetworkModelService.DataModel.Ostale
{
    using System;
    using System.Collections.Generic;
    using FTN;
    using FTN.Common;
    using FTN.Services.NetworkModelService.DataModel.Core;


    /// A wire or combination of wires, with consistent electrical characteristics, building a single electrical system, used to carry alternating current between points in the power system.
    ///For symmetrical, transposed 3ph lines, it is sufficient to use  attributes of the line segment, which describe impedances and admittances for the entire length of the segment.  Additionally impedances can be computed by using length and associated per length impedances.
    public class ACLineSegment : Conductor {
        
        public ACLineSegment(long globalId) : base(globalId) { }

        private long perLengthImpedance;

        public long PerLengthImpedance
        {
            get { return perLengthImpedance; }
            set { perLengthImpedance = value; }
        }


        private float b0ch;

        public float B0CH
        {
            get { return b0ch; }
            set { b0ch = value; }
        }

        private float bch;

        public float BCH
        {
            get { return bch; }
            set { bch = value; }
        }

        private float g0ch;

        public float G0CH
        {
            get { return g0ch; }
            set { g0ch = value; }
        }

        private float gch;

        public float GCH
        {
            get { return gch; }
            set { gch = value; }
        }

        private float r;

        public float R
        {
            get { return r; }
            set { r = value; }
        }
        private float r0;

        public float R0
        {
            get { return r0; }
            set { r0 = value; }
        }

        private float x;

        public float X
        {
            get { return x; }
            set { x = value; }
        }
        private float x0;

        public float X0
        {
            get { return x0; }
            set { x0 = value; }
        }

        public override bool Equals(object x)
        {
            if (base.Equals(x))
            {
                ACLineSegment obj = (ACLineSegment)x;
                return this.b0ch == obj.B0CH &&
                       this.bch == obj.bch &&
                       this.g0ch == obj.g0ch &&
                       this.gch == obj.gch &&
                       this.r == obj.r &&
                       this.r0 == obj.r0 &&
                       this.x == obj.x &&
                       this.x0 == obj.x0 &&
                       this.PerLengthImpedance == obj.PerLengthImpedance;
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess Implementation

        public override bool HasProperty(ModelCode property)
        {
            switch (property)
            {
                case ModelCode.ACLINESEG_B0CH:
                case ModelCode.ACLINESEG_BCH:
                case ModelCode.ACLINESEG_G0CH:
                case ModelCode.ACLINESEG_GCH:
                case ModelCode.ACLINESEG_X:
                case ModelCode.ACLINESEG_X0:
                case ModelCode.ACLINESEG_R:
                case ModelCode.ACLINESEG_R0:
                case ModelCode.ACLINESEG_PERLENGTHIMP:
                    return true;
                default:
                    return base.HasProperty(property);
            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.ACLINESEG_B0CH:
                    property.SetValue(this.B0CH);
                    break;
                case ModelCode.ACLINESEG_BCH:
                    property.SetValue(this.BCH);
                    break;
                case ModelCode.ACLINESEG_G0CH:
                    property.SetValue(this.G0CH);
                    break;
                case ModelCode.ACLINESEG_GCH:
                    property.SetValue(this.GCH);
                    break;
                case ModelCode.ACLINESEG_X:
                    property.SetValue(this.X);
                    break;
                case ModelCode.ACLINESEG_X0:
                    property.SetValue(this.X0);
                    break;
                case ModelCode.ACLINESEG_R:
                    property.SetValue(this.R);
                    break;
                case ModelCode.ACLINESEG_R0:
                    property.SetValue(this.R0);
                    break;
                case ModelCode.ACLINESEG_PERLENGTHIMP:
                    property.SetValue(this.PerLengthImpedance);
                    break;
                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.ACLINESEG_B0CH:
                    this.B0CH = property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_BCH:
                    this.BCH = property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_G0CH:
                    this.G0CH = property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_GCH:
                    this.GCH = property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_X:
                    this.X= property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_X0:
                    this.X0 = property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_R:
                    this.R = property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_R0:
                    this.R0= property.AsFloat();
                    break;
                case ModelCode.ACLINESEG_PERLENGTHIMP:
                    this.PerLengthImpedance = property.AsReference();
                    break;
                default:
                    base.SetProperty(property);
                    break;
            }
        }


        #endregion

        #region IReference


        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            if (perLengthImpedance != 0 && (refType == TypeOfReference.Both || refType == TypeOfReference.Target))
            {
                references[ModelCode.ACLINESEG_PERLENGTHIMP] = new List<long> { perLengthImpedance };
            }
            base.GetReferences(references, refType);
        }

        public override void AddReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.ACLINESEG_PERLENGTHIMP:
                    perLengthImpedance = globalId;
                    break;
                default:
                    base.AddReference(referenceId, globalId);
                    break;
            }
        }

        public override void RemoveReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.ACLINESEG_PERLENGTHIMP:
                    if (perLengthImpedance == globalId)
                    {
                        perLengthImpedance = 0;
                    }
                    else
                    {
                        CommonTrace.WriteTrace(CommonTrace.TraceWarning, "Entity (GID = 0x{0:x16}) doesn't contain reference 0x{1:x16}.", this.GlobalId, globalId);
                    }
                    break;
                default:
                    base.RemoveReference(referenceId, globalId);
                    break;
            }
        }

        #endregion
    }
}
