//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN.Services.NetworkModelService.DataModel.Ostale
{
    using System;
    using System.Collections.Generic;
    using FTN;
    using FTN.Common;
    using FTN.Services.NetworkModelService.DataModel.Core;


    /// Sequence impedance and admittance parameters per unit length, for transposed lines of 1, 2, or 3 phases. For 1-phase lines, define x=x0=xself. For 2-phase lines, define x=xs-xm and x0=xs+xm.
    public class PerLengthSequenceImpedance : PerLengthImpedance
    {
        public PerLengthSequenceImpedance(long globalId) : base(globalId) { }

        private float b0ch;

        public float B0CH
        {
            get { return b0ch; }
            set { b0ch = value; }
        }

        private float bch;

        public float BCH
        {
            get { return bch; }
            set { bch = value; }
        }

        private float g0ch;

        public float G0CH
        {
            get { return g0ch; }
            set { g0ch = value; }
        }

        private float gch;

        public float GCH
        {
            get { return gch; }
            set { gch = value; }
        }

        private float r;

        public float R
        {
            get { return r; }
            set { r = value; }
        }
        private float r0;

        public float R0
        {
            get { return r0; }
            set { r0 = value; }
        }

        private float x;

        public float X
        {
            get { return x; }
            set { x = value; }
        }
        private float x0;

        public float X0
        {
            get { return x0; }
            set { x0 = value; }
        }

        public override bool Equals(object x)
        {
            if (base.Equals(x))
            {
                PerLengthSequenceImpedance obj = (PerLengthSequenceImpedance)x;
                return this.b0ch == obj.B0CH &&
                       this.bch == obj.bch &&
                       this.g0ch == obj.g0ch &&
                       this.gch == obj.gch &&
                       this.r == obj.r &&
                       this.r0 == obj.r0 &&
                       this.x == obj.x &&
                       this.x0 == obj.x0;
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess Implementation

        public override bool HasProperty(ModelCode property)
        {
            switch (property)
            {
                case ModelCode.PERLENGTHSEQIMP_B0CH:
                case ModelCode.PERLENGTHSEQIMP_BCH:
                case ModelCode.PERLENGTHSEQIMP_G0CH:
                case ModelCode.PERLENGTHSEQIMP_GCH:
                case ModelCode.PERLENGTHSEQIMP_X:
                case ModelCode.PERLENGTHSEQIMP_X0:
                case ModelCode.PERLENGTHSEQIMP_R:
                case ModelCode.PERLENGTHSEQIMP_R0:
                    return true;
                default:
                    return base.HasProperty(property);
            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.PERLENGTHSEQIMP_B0CH:
                    property.SetValue(this.B0CH);
                    break;
                case ModelCode.PERLENGTHSEQIMP_BCH:
                    property.SetValue(this.BCH);
                    break;
                case ModelCode.PERLENGTHSEQIMP_G0CH:
                    property.SetValue(this.G0CH);
                    break;
                case ModelCode.PERLENGTHSEQIMP_GCH:
                    property.SetValue(this.GCH);
                    break;
                case ModelCode.PERLENGTHSEQIMP_X:
                    property.SetValue(this.X);
                    break;
                case ModelCode.PERLENGTHSEQIMP_X0:
                    property.SetValue(this.X0);
                    break;
                case ModelCode.PERLENGTHSEQIMP_R:
                    property.SetValue(this.R);
                    break;
                case ModelCode.PERLENGTHSEQIMP_R0:
                    property.SetValue(this.R0);
                    break;
                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.PERLENGTHSEQIMP_B0CH:
                    this.B0CH = property.AsFloat();
                    break;
                case ModelCode.PERLENGTHSEQIMP_BCH:
                    this.BCH = property.AsFloat();
                    break;
                case ModelCode.PERLENGTHSEQIMP_G0CH:
                    this.G0CH = property.AsFloat();
                    break;
                case ModelCode.PERLENGTHSEQIMP_GCH:
                    this.GCH = property.AsFloat();
                    break;
                case ModelCode.PERLENGTHSEQIMP_X:
                    this.X = property.AsFloat();
                    break;
                case ModelCode.PERLENGTHSEQIMP_X0:
                    this.X0 = property.AsFloat();
                    break;
                case ModelCode.PERLENGTHSEQIMP_R:
                    this.R = property.AsFloat();
                    break;
                case ModelCode.PERLENGTHSEQIMP_R0:
                    this.R0 = property.AsFloat();
                    break;
                default:
                    base.SetProperty(property);
                    break;
            }
        }


        #endregion

        #region IReference


        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            base.GetReferences(references, refType);
        }

        public override void AddReference(ModelCode referenceId, long globalId)
        {
            
                    base.AddReference(referenceId, globalId);

        }

        public override void RemoveReference(ModelCode referenceId, long globalId)
        {

                    base.RemoveReference(referenceId, globalId);

        }

        #endregion
    }
}
